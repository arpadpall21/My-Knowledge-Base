http {
    server {
        listen 3001;
        
        location / {
            # add_header Location http://localhost:3002;
            # return 302 localhost:3002;
            return 200 "OK";
        }
    }
}

events { }


##########################################################################
# redirecting
##########################################################################
# http {
#     include /opt/homebrew/etc/nginx/mime.types;
    
#     server {
#         listen 3000;
        
#         location /base {
#             alias "/Users/apall/Documents/Personal/my_knowledge_code_base/My Site/NGINX/TEST";
#             index test;
#         }
        
#         location / {
#             return 301 /base;       # redirecting to <mark>/base</mark>
#         }
#     }
# }

# events {}



##########################################################################
# rewriting
# ##########################################################################
# http {
#     include /opt/homebrew/etc/nginx/mime.types;
    
#     server {
#         listen 3000;
        
#         rewrite /newPath /test;           # url stays at /newPath but redirected to /test
        
#         location /test {
#             alias "/Users/apall/Documents/Personal/my_knowledge_code_base/My Site/NGINX/TEST";
#             try_files /index.html /test =404;
#         }
        
#     # --------------------------------------
#         rewrite /\d.* /randomDigit;
        
#         location /randomDigit {
#             alias "/Users/apall/Documents/Personal/my_knowledge_code_base/My Site/NGINX/TEST";
#             try_files /digit =404;
#         }
        
#     # --------------------------------------
#         rewrite /(\d).* /getDigit/digit_$1;   # using captured regExp group value
        
#         location ~* /getDigit/digit_\d {
#             root "/Users/apall/Documents/Personal/my_knowledge_code_base/My Site/NGINX/TEST";
#         }
#     }
# }

# events {}





##########################################################################
# simple load balancer
# ##########################################################################
# http {
#     upstream backend {              # group of servers 
#         server localhost:3001;            # load in distributed in Round Robin style
#         server localhost:3002;
#         server localhost:3003;
#         server localhost:3004 backup;     # server kicks in when ALL the balancer servers are down
#     }
    
#     server {
#         listen 3000;
        
#         location / {
#             proxy_pass http://backend;
#         }
#     }
# }

# events {}


##########################################################################
# weighted load balancer
# ##########################################################################
# http {
#     upstream backend {
#         server localhost:3001 weight=2;         # connection distributed based on server weight 
#         server localhost:3002 weight=5;
#         server localhost:3003 weight=3;
#         server localhost:3004;                  # default weight = 1
#     }
    
#     server {
#         listen 3000;
        
#         location / {
#             proxy_pass http://backend;
#         }
#     }
# }

# events {}



##########################################################################
# load balancing on a specified path
# ##########################################################################
# http {
#     upstream backend {
#         least_conn;
        
#         server localhost:3001;      # -! servers have to listen on path /test 
#         server localhost:3002;
#         server localhost:3003;
#         server localhost:3004;
#     }
    
#     server {
#         listen 3000;
        
#         location /test {            # load is balanced at this path
#             proxy_pass http://backend;
#         }
#     }
# }

# events {}



##########################################################################
# passive health chekck 
# ##########################################################################
# http {
#     upstream backend {
#         server localhost:3001;
#         server localhost:3002 max_fails=3 fail_timeout=1m;    # after 3 failed attempts nginx marks this server as unavailable for 1 minute
#     }
    
#     server {
#         listen 3000;
        
#         location / { 
#             proxy_pass http://backend;
#         }
#     }
# }

# events {}



##########################################################################
# active health chekck 
# ##########################################################################
# http {
#     upstream backend {
#         server localhost:3001;
#         server localhost:3002;
#         health_check;
#     }
    
#     server {
#         listen 3000;
        
#         location / { 
#             proxy_pass http://backend;
#         }
#     }
# }

# events {}







# *#########################################################################
# compression
# ##########################################################################
# http {
#     root /var/www/site;
#     gzip on;            # compresses (includes the header <mark>Content-Encoding gzip</mark>)
#     gzip_types any;
    
#     server { 
#         listen 3002;
        
#         # listen / {
            
#         # }
#     }
# }

# events {}



# *#########################################################################
# using nginx for ssl reverse proxy
# ##########################################################################
# http {
#     include /opt/homebrew/etc/nginx/mime.types;

#     server { 
#         listen 3000 ssl;
#         7 localhost;
        
#         ssl_certificate "/Users/apall/Documents/Personal/my_knowledge_code_base/My Site/NGINX/srvCert.cer";
#         ssl_certificate_key "/Users/apall/Documents/Personal/my_knowledge_code_base/My Site/NGINX/srvKey.pem";
        
#         root "/Users/apall/Documents/Personal/my_knowledge_code_base/My Site";
#     }
# }

# events {}



# *#########################################################################
# using nginx reverse proxy for ssl load balancer
# ##########################################################################
# http {
#     include /opt/homebrew/etc/nginx/mime.types;

#     upstream backend {
#         server localhost:3001;
#         server localhost:3002;
#     }

#     server {                                # https connection between the client and nginx 
#         listen 3000 ssl;
#         server_name localhost;
        
#         ssl_certificate "/Users/apall/Documents/Personal/my_knowledge_code_base/My Site/NGINX/srvCert.cer";
#         ssl_certificate_key "/Users/apall/Documents/Personal/my_knowledge_code_base/My Site/NGINX/srvKey.pem";
        
#         root "/Users/apall/Documents/Personal/my_knowledge_code_base/My Site";
        
#         location / {
#             proxy_pass http://backend;      # simple http connection betweenn backend servers
#         }
#     }
# }

# events {}



# *#########################################################################
# basic authentication
# ##########################################################################
# http {
#     include /opt/homebrew/etc/nginx/mime.types;
    
#     server {
#         listen 3000;
#         root "/Users/apall/Documents/Personal/my_knowledge_code_base/My Site";
        
#         auth_basic "HTTP Basic Authentication";
#         auth_basic_user_file "/Users/apall/Documents/Personal/my_knowledge_code_base/My Site/NGINX/TEST/.htpasswd";
#     }
# }

# events {}




# *#########################################################################
# static caching
# ##########################################################################
# http {
#     proxy_cache_path '/home/pall/Documents/IT/my_knowledge_code_base/My Site/NGINX/cache' keys_zone=mycache:10m;
#     proxy_cache_valid any 2m;     # for any request types (GET, POST, etc..) cache is valid for 2 minutes

#     server {
#         listen 3000;
#         proxy_cache         mycache;            # valid for both virtual servers
        
#         location / {
#             proxy_pass http://localhost:3001;
#         }

#         location /test {
#             proxy_pass http://localhost:3002;
#         }
#     }
# }

# events {}


